- IFRAME (inline frame ou quadro em linha)

    - O iframe serve para criar uma janela (como se fosse uma nova aba) ou uma
    nova instancia do navegador, mas dentro da nossa página.

    Por exemplo, se tivermos este html:

        h1>Testando o uso de um iframe</h1>
        <p>
            Acessando o site do
    
            <iframe src="https://www.cursoemvideo.com" frameborder="0"></iframe>
            
            para aprender a programar.
        </p>

        Na página aparece a janela depois do Acessando o site do, com o site do
        cursoemvideo


    - Tem alguns sites que têm proteções contra o uso de iframes em sites de terceiros.

    - Nem todos os dispositivos moveis (celulares etc) tem suporte para iframe, então,
    tudo o que colocarmos entre a abertura <iframe> e o fechamento </iframe>, vai funcionar
    como conteúdo alternativo para essses casos.

    Por exemplo: se o celular não soporta iframe, podemos fazer assim:

        <iframe ....>
            <a href="https://blablablabla.com" etc etc>
        </iframe>

        Assim se o dispositivo não for compativel com iframe, mostra o link


    - ALTURA E LARGURA DO iframe:

        - Por padrão é de 300 x 150
        - podemos alterar dento da tag mesmo: heigth="valor" width="valor"
        - Podemos tambem configurar a altura e largura usando css ao invez de usar a tag
        - Se tiver configuração nos dois (na tag iframe e no css), o css ganha.
        - Se não tiver nem configuração na tag nem na css, o iframe usa os valores
        padrão de 300 x 150


    - ROLAGEM NO iframe (quando ele é grande para permitir rolagem):

        - parametro scrolling: tem os valores:
        - auto (o padrão)
        - yes
        - no - Supostamente, ao usar no, o navegador não deixa fazer a rolagem
        Mas na realidade depende do navegador. O google-chrome deixa rolar na mesma.

    -FRAMEBOARDER

        - Diz se aparece a borda ou não. Valores: "0" tira a borda, qualquer outo valor coloca a borda.
        - A borda pode ser personalizada no css.

    - Podemos carregar páginas internas nossas no iframe ao invés
    de páginas externas. Apenas basta colocar o caminho da página
    em src=""

    - Podemos também abrir paginas internas mas sem especificar no iframe
    o nome/caminho da pagina no src="". Assim:

    - Criamos o iframe: <iframe></iframe>, e em src, podemos colocar uma pagina ou deixar vazio: src="", mas colocamos
    uma propriedade name: name="frame" por exemplo.
    - depois podemos ter algures na pagina um link (ancora): <a>, e em hrer="",
    colocamos o caminho da pagina, e depois em target="" ao invez de colocar _blank,
    _self etc, colocamos o valor que demos á propriedade name="" do iframe, no caso ficaria
    target="frame"

    - Quando a pagina onde estamos usando iframe abre, se não colocamos nada em src, o iframe inicia vazio. Podemos colocar
    em src="" o caminho de uma página interna, ou podemos ate criar um arquivo especificamente para ser usado como primeiro conteudo do iframe antes de o usuario apertar nos links, ou podemos usar a
    propriedade srcdoc="", que nos deixa criar html inline, onde podemos colocar por exemplo h1 com titulo, paragrafos incluindo
    imagens.
    Isso permite colocar algum conteudo temporário para quando a pagina acaba de carregar e antes do usuario dar um clique em um link

    Para colocar imagem , ficaria algo assim:

        - srcdoc="<p></p> etc.. <img src='caminho da imagem'>"

        - Como o srcdoc="", já tem aspas duplas, em img src colocamos aspas simples ok!!


    - Para bloquear possiveis açoes maliciosas vindas de outros sites que colocamos no iframe, ou seja, impedir que esses sites manipulem ou façam algo malicioso no nosso site, podemos
    colocar o atributo sandbox="sandbox" dentro da tag <iframe>
    No valor podemos colocar sandbox="sandbox" ou apenas sandbox="", vazio, que faz o mesmo, bloqueia tudo.

    Para alem de bloquear tudo, com sandbox="sandbox" ou sandbox="", podemos permitir algumas coisas especificas, por exemplo, ao inves de bloquear tudo, usando sandbox="sandbox", podemos usar por exemplo
    sandbox="allow-same-origin allow-forms allow-scripts", podemos usar um "allow" ou mais separados por espaços
    especificando o que vamos permitir. Aqui, neste exemplo, estamos permitindo conteudo da mesma origem, formularios e scripts. Tudo o resto é bloqueado.

    - Outra medida de segurança que podemos colocar é o atributo
    referrerpolicy="no-referrer", que diz que o conteudo dentro do
    iframe, ou seja a pagina que colocamos no iframe, não vai coletar nada do usuário. O padrão do referrerpolicy é no-referrer-when-downgrade, mas o no-referrer é mais seguro e mais estrito.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- ESCONDER A BARRA DE ROLAGEM NA PAGINA:

    - no css: ::-webkit-scrollbar { width: 0px; heigth: 0px; }



------------------------------------------------------------------------------------------

- FORMULARIOS:

    - Todo o formulário tem que estar entre as tags <form> e </form>
    - toda a caixa de texto (input type="text") tem que ter o atributo name="" e id=""
    - Para criar um butão de enviar (ou submeter), usamos o input type="submit". Precisamos colocar também o atributo value. Por exemplo: value="Enviar", mostra
    no botão a palavra Enviar.

    Para pedir uma palavra-passe usamos o type password no <input>, que quando o usuario digita a palavra passe, mostra bolinha ou asterisco ao invéz da palavra-passe

    Outra coisa, para forçar o usuario a realmente entrar com dados, usamos o atributo
    required na tag <input>. Ao fazer isso, se o usuario deixar em branco, mostra aquele
    balaozinho com exclamação "!Preencha este campo."

    Podemos tambem forçar um tamanho minimo e máximo para nomes senhas etc.
    Para isso usamos minlength e maxlength. Exemplo:
    minlength="5" maxlength="15"

    Podemos também mudar o tamanho da caixa (do input), assim, dentro da tag <input>:
    size="10". Aqui, diz que a caixa vai mostrar 10 letras. O size não limita a quantidade de caracteres, apenas limita quantos caracteres ele mostra por vez. Ou seja, se temos o tamanho 10, mas o maxlength for 30, a caixa ermite inserir 30 caracteres, mas só mostra 10 deles por vez e cria uma rolagem lateral

    Também podemos colocar um texto padrão (ou dica) na caixa, por exemplo, Nome do Usuário. Usamos, dentro do <input> placeholder="Nome do usuário"

    - EXEMPLO DE FORMULARIO SIMPLES:

        form>
            <p>Nome: <input type="text" name="nome" id="nome"></p>
            <p>Sobrenome: <input type="text" name="sobrenome" id="sobrenome"</p>
            <p> <input type="submit" value="Enviar"> </p>
        </form>

    - Funciona mas não é a forma mais correta de criar um formulário
    - Para desligar o autocompletar nos formulários (por exemplo se já colocamos o nome antes, e depois voltamos na pagina e quando vamos colocar o nome aparece aquele tooltip já com o nome que tinhamos colocado), dentro da tar <form> colocamos: autocomplete="off"

    - Para fazer alguma coisa com os dados do formulário, temos que enviar-los para alguma
    linguagem de programação que vai processar-los e agir sobre eles, por exemplo php.
    Fazemos isso, colocando o atributo action, na tag <form> e especificando o nome do
    script ou programa que vai receber e processar esses dados quando o usuario aperta
    o botão de enviar.
    Por exemplo: <form action="cadastro.php"></form>


    - FORMA CORRETA DE CRIAR FORMULRIOS:

        <form action="cadastro.php" autocomplete="off">
            <p>
                <label for="inome">Nome:</label>
                <input type="text" name="nome" id="inome">
            </p>
            <p>
                <label for="isobrenome">Sobrenome:</label>
                <input type="text" name="sobrenome" id="isobrenome"
            </p>
            <p><input type="submit" value="Enviar"></p>
        </form>

        Nota: Por padrão usa-se div e não <p>. usamos <p> apenas para simplificar.
        
        Aqui, estamos assossiando o label (nome , sobrenome), com um id
        Ou seja estamos relacionando o label ao seu elemento (ao seu controle).
        Exemplificando, estamos, aqui no exemplo, criando uma relação entre o label
        Nome: e a caixa de input na frente dele.
        Isto permite os navegadores de saberem qual caixa está relacionada a qual label
        Isto também faz com que quando damos um clique no label, ele já seleciona automaticamente a caixa

    - DIFERENCAS ENTRE OS ATRIBUTOS NAME E ID, NOS FORMULARIOS:

        - A linguagem php precisa que todo o input <input> tenha o atributo name="",
        para funcionar direito com formulários.

        - Para o javascript, ele usa mais o id, embora consiga usar também o name
    


    - METODO GET E METODO POST:

        - Temos dois métodos para o envio de formulário:

        - GET (é o padrão) - Este coloca os dados na propria url
        - POST - este não coloca os dados na url

        - O post não é mais seguro. Simplesmente não mostra os dados na url. mas nas ferramentas do browser (ferramentas de desenvolvedor etc), na aba network, mostra
        o arquivo de script que vai processar os dados, e clicando nele a gente consegue ver na mesma os dados, que ficam na secçao headers.


        Então, usamos o método GET (o padrão), quando os dados não forem sensiveis, ou seja para quando estamos perguntando o nome da pessoa, o peso etc. Quando nao pedimos senha, cpf etc.
        Podemos usar també o GET, quando queremos compartilhar a pesquisa que foi feita, ou seja, ao invez de compartilhar uma url de um site, podemos compartilhar
        o termo de pesquisa que fizemos no Google.

        Quando enviamos dados usando GET, só podemos enviar dados até 3000 bytes, se ultrapassar os 3000 bytes não podemos usar o GET. Usamos o POST

        Outra situação onde não podemos usar o GET, é quando usamos campos com dados sensiveis, como senhas, cpf etc.. USAMOS POST (parar segurança real temos que usar https)

        Também não podemos usar o GET, para envio de fotos e outros arquivos. Para essas coisas usamos o POST

        - Tradicionalmente o GET é (ou era) mais rápido que o POST, mas hoje não é perceptivel. O GET continua sendo mais rápido mas com a velocidade dos processadores memorias e midias não dá (ou quase não dá) para perceber.


        - Formulários na prática ficam com o autocomplete ligado, porque isso facilita,
        uma vez que os navegadores guardam o nosso nome etc, Por exemplo quando o navegador mostra o prompt: Deseja salvar estes dados? Então, tendo o autocomplete
        ligado no formulário, o proprio navegador pode sugerir o nome de usuário por exemplo.
        Mas para isso funcionar, temos que dizer para o navegador que a caixa em questão, é uma caixa de nome, caixa de senha etc. Para isso fazemos assim:

            <form method="post" action="cadastro.php" autocomplete="on">
            <p>
                <label for="iusu">Usuário: </label>
                <input type="text" name="usu"id="iusu" required minlength="5" maxlength="30" size="10" placeholder="nome do usuário" autocomplete="username">
            </p>
            <p>
                <label for="isen">Senha: </label>
                <input type="password" name="sen"id="isen" required minlength="8" maxlength="20" size="10" placeholder="minimo 8 letras" autocomplete="current-password">
            </p>
            <p>
                <input type="submit" value="Enviar">
                <input type="reset" value="Limpar">
            </p>
        </form>

        Ou seja, em cada input que queremos ter o autocomplete ligado, colocamos,
        autocomplete="palavra-chave". Por exemplo, no exemplo acima, usamos
        autocomplete="username" -> que diz que a caixa é de nome de usuario
        autocomplete="current-password" -> que diz que a caixa é para a senha atual
